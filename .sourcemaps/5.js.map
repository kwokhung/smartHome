{"version":3,"sources":["../../src/pages/config/config.module.ts","../../src/pages/config/config.ts"],"names":[],"mappings":"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","file":"5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { ConfigPage } from './config';\n\n@NgModule({\n  declarations: [\n    ConfigPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(ConfigPage),\n  ],\n  exports: [\n    ConfigPage\n  ]\n})\nexport class ConfigPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/config/config.module.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams, AlertController, ToastController } from 'ionic-angular';\nimport { Validators, FormBuilder, FormGroup } from '@angular/forms';\nimport { Http, Headers, RequestOptions, Response } from '@angular/http';\nimport { MqttProvider } from '../../providers/mqtt/mqtt';\n\n@IonicPage({\n  name: 'ConfigPage'\n})\n@Component({\n  selector: 'page-config',\n  templateUrl: 'config.html',\n})\nexport class ConfigPage {\n\n  config: FormGroup;\n\n  constructor(public navCtrl: NavController, public navParams: NavParams, public alertCtrl: AlertController, public toastCtrl: ToastController, public formBuilder: FormBuilder, public http: Http, public mqtt: MqttProvider) {\n    this.config = this.formBuilder.group({\n      host: ['', Validators.required],\n      ssid: ['', Validators.required],\n      password: ['', Validators.required],\n    });\n  }\n\n  ionViewDidLoad() {\n    console.log('ionViewDidLoad ConfigPage');\n  }\n\n  submit() {\n    this.http.post('http://' + this.config.value.host, {\n      ssid: this.config.value.ssid,\n      password: this.config.value.password\n    }, new RequestOptions({\n      headers: new Headers({\n        'Content-Type': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      })\n    })).subscribe((data: Response) => {\n      this.toastCtrl.create({\n          message: JSON.stringify(data.json()),\n          duration: 1000,\n          position: 'middle'\n        }).present();\n    }, (error: any) => {\n      this.alertCtrl.create({\n        title: 'System Error',\n        subTitle: JSON.stringify(error),\n        buttons: [\"Close\"]\n      }).present();\n    });\n  }\n\n  reset() {\n    this.mqtt.send(JSON.stringify({ what: { toDo: \"reset\", details: { ssid: \"xxx\", password: \"yyy\" } } }), 'nodemcu01');\n  }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/config/config.ts"],"sourceRoot":""}