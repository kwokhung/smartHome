{"version":3,"sources":["../../src/pages/speech/speech.module.ts","../../src/pages/speech/speech.ts"],"names":[],"mappings":"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","file":"1.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { SpeechPage } from './speech';\n\n@NgModule({\n  declarations: [\n    SpeechPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(SpeechPage),\n  ],\n  exports: [\n    SpeechPage\n  ]\n})\nexport class SpeechPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/speech/speech.module.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams, Platform } from 'ionic-angular';\nimport { SpeechRecognition, SpeechRecognitionListeningOptionsAndroid, SpeechRecognitionListeningOptionsIOS } from '@ionic-native/speech-recognition';\nimport { LoggerProvider } from '../../providers/logger/logger';\nimport { MqttProvider } from '../../providers/mqtt/mqtt';\n\n@IonicPage({\n  name: 'SpeechPage'\n})\n@Component({\n  selector: 'page-speech',\n  templateUrl: 'speech.html',\n})\nexport class SpeechPage {\n\n  speechList: Array<string> = [];\n  androidOptions: SpeechRecognitionListeningOptionsAndroid;\n  iosOptions: SpeechRecognitionListeningOptionsIOS;\n\n  constructor(public navCtrl: NavController, public navParams: NavParams, public platform: Platform, public speechRecognition: SpeechRecognition, public logger: LoggerProvider, public mqtt: MqttProvider) {\n  }\n\n  ionViewDidLoad() {\n    console.log('ionViewDidLoad SpeechPage');\n  }\n\n  isSpeechSupported() {\n    this.speechRecognition.isRecognitionAvailable()\n      .then((available: boolean) => {\n        this.logger.addLog(JSON.stringify(available));\n      }).catch((reason: any) => {\n        this.logger.addLog(JSON.stringify(reason));\n      });\n  }\n  /*async isSpeechSupported(): Promise<boolean> {\n    let isAvailable = await this.speechRecognition.isRecognitionAvailable();\n    this.logger.addLog(JSON.stringify(isAvailable));\n\n    return isAvailable;\n  }*/\n\n  getPermission() {\n    this.speechRecognition.requestPermission().then(() => {\n      this.logger.addLog(JSON.stringify('permission'));\n    }).catch((reason: any) => {\n      this.logger.addLog(JSON.stringify(reason));\n    });\n  }\n  /*async getPermission(): Promise<void> {\n    try {\n      let permission = await this.speechRecognition.requestPermission();\n      this.logger.addLog(JSON.stringify(permission));\n\n      return permission;\n    }\n    catch (e) {\n      this.logger.addLog(JSON.stringify(e));\n    }\n  }*/\n\n  hasPermission() {\n    this.speechRecognition.hasPermission().then((permission: boolean) => {\n      this.logger.addLog(JSON.stringify(permission));\n    }).catch((reason: any) => {\n      this.logger.addLog(JSON.stringify(reason));\n    });\n  }\n  /*async hasPermission(): Promise<boolean> {\n    let permission = await this.speechRecognition.hasPermission();\n    this.logger.addLog(JSON.stringify(permission));\n\n    return permission;\n  }*/\n\n  getSupportedLanguages() {\n    this.speechRecognition.getSupportedLanguages().then((languages: Array<string>) => {\n      this.logger.addLog(JSON.stringify(languages));\n    }).catch((reason: any) => {\n      this.logger.addLog(JSON.stringify(reason));\n    });\n  }\n  /*async getSupportedLanguages(): Promise<Array<string>> {\n    try {\n      let languages = await this.speechRecognition.getSupportedLanguages();\n      this.logger.addLog(JSON.stringify(languages));\n\n      return languages;\n    }\n    catch (e) {\n      this.logger.addLog(JSON.stringify(e));\n    }\n  }*/\n\n  listenForSpeech(): void {\n    this.androidOptions = {\n      language: '',\n      matches: 5,\n      prompt: '',\n      showPopup: true\n\n    }\n\n    this.iosOptions = {\n      language: 'en-US',\n      showPartial: false\n    }\n\n    if (this.platform.is('android')) {\n      this.speechRecognition.startListening(this.androidOptions).subscribe((matches: Array<string>) => {\n        this.speechList = matches;\n\n        let ledOn = this.speechList.some((value, index, array) => {\n          return value.match('開') !== null;\n        });\n\n        if (ledOn) {\n          this.mqtt.send('{\\\"RVALUE\\\":1023,\\\"GVALUE\\\":1023,\\\"BVALUE\\\":1023}', 'nodemcu01');\n        }\n\n        let ledOff = this.speechList.some((value, index, array) => {\n          return value.match('關') !== null;\n        });\n\n        if (ledOff) {\n          this.mqtt.send('{\\\"RVALUE\\\":0,\\\"GVALUE\\\":0,\\\"BVALUE\\\":0}', 'nodemcu01');\n        }\n      }, (error) => {\n        this.logger.addLog(JSON.stringify(error));\n      });\n    }\n    else if (this.platform.is('ios')) {\n      this.speechRecognition.startListening(this.iosOptions).subscribe((matches: Array<string>) => {\n        this.speechList = matches;\n      }, (error) => {\n        this.logger.addLog(JSON.stringify(error));\n      });\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/speech/speech.ts"],"sourceRoot":""}